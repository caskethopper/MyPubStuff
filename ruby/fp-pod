require 'net/imap'
require 'mail'
require 'nokogiri'
require 'hpricot'
#require 'nikkou'
#require 'charlock_holmes'

# imap monkeypatch

module Net
  class IMAP
    class ResponseParser
      def continue_req
        match(T_PLUS)
        return ContinuationRequest.new(resp_text, @str)
      end #def continue_req
    end #class ResponseParser
  end #class IMAP

  class IMAP
    class ResponseParser
      def response
        token = lookahead
        case token.symbol
        when T_PLUS
          result = continue_req
        when T_STAR
          result = response_untagged
        else
          result = response_tagged
        end

        match(T_SPACE) if lookahead.symbol == T_SPACE
        match(T_CRLF)
        match(T_EOF)
        return result
      end #def response
    end #class ResponseParser
  end #class IMAP
end #module Net



## Not sure if I should prepopulate the hash keys
## But that is what I'm doing
## So I have that going for me

issue = { "submitter" => "",
          "sr"        => "",
          "phone"     => "",
          "priority"  => "",
          "email"     => "",
          "subject"   => "",
          "dept"      => "",
          "status"    => "",
          "location"  => "",
          "primary"   => "",
          "cc"        => "",
          "allass"    => "",
          "due"       => "",
          "desc"      => "",
          "internal"  => "" }




imap = Net::IMAP.new('imap.cpcc.edu', :port=>'imaps', :ssl=>true )
imap.authenticate('PLAIN','cssrequest@cpcc.edu','MYPASSWORD')



imap.select('test1')
imap.search(['ALL']).each do |message_id|

    msg = imap.fetch(message_id,'RFC822')[0].attr['RFC822']
    mail = Mail.read_from_string msg

#    puts mail.body.decoded



    mail.part.each do |part|



   
      msgpart = part.decoded
      msghtm = Nokogiri::HTML(msgpart)

# This seems to get everything except internal and description
#      mytest = msghtm.css("b")
#####      mytest.each do |test|
#####        puts "----------------------------------------"
#####        puts test.content
#####      end


# This seems to get me most of the way there
# As long as I drop the first n elements

#      mytrtest = msghtm.css('tr td')
#.drop(12)
#      mytrtest.each do |tr|
#      puts "-----------------------------"
#      puts tr.content
#      end

      mytable = msghtm.css('table').drop(3)
      mytable.each do |table|
        myrows = table.css('tr')
        myrows.each do |data|
          mydata = data.css('td')
          mydata.each do |node|
            entry = node.children
              #puts "========================"
              #puts entry.text.gsub(/[^0-9a-z: ]/i, '').strip
            entry_eval = entry.text.gsub(/[^0-9a-z: ]/i, '').strip
            case entry_eval
            when "Name:"
              issue[:submitter] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "Service Request Number:"
              issue[:sr] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "Phone:"
              issue[:phone] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "Priority:"
              issue[:priority] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "Email Address:"
              issue[:email] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "Subject:"
              issue[:subject] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "Department:"
              issue[:dept] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "Status:"
              issue[:status] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "Location:"
              issue[:location] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "Primary Assignment:"
              issue[:primary] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "CCs:"
              issue[:cc] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "All Assignees Involved:"
              issue[:allass] = node.next_element.text.gsub(/\s+/, ' ').strip
            when "SLA Due Date:"
              issue[:due] = node.next_element.text.gsub(/\s+/, ' ').strip
            end

            if entry_eval.start_with?('Description:')
              mydescription = node.text.gsub(/\s+/, ' ').strip.sub('Description:','')
##.split(/(Entered.*:)/)
              mydescription = mydescription.rpartition(/(Entered.*:)/)
              #mydescription.each do |subdesc| 
              #  puts "---------description--------"
              #  puts subdesc
              #end
              puts mydescription
            elsif entry_eval.start_with?('Internal:')
              myinternal = node.text.gsub(/\s+/, ' ').strip.sub('Internal:','')
##.split(/(Entered.*:)/)
              myinternal.rpartition(/(Entered.*:)/)
              #myinternal.each do |subint|
#
#                puts "----------internal----------"
#                puts subint
             #end
            end
#            puts "--------------CHILDREN"
#            puts text.children
#            puts "--------------ELEMENTS"
#            puts text.elements
#            output = text.css('b')
#            output.each do |results|
#              #puts "----------------------"
#              field = results.text
#              puts field.strip
#              case field
##              if field.include? "Description:"
##                myparent = results.parent.parent
##                mytext = myparent.text
##                mydescription = mytext.sub('Description:','').split(/(Entered.*:)/)
##                mydescription.each do |desc|
##                  #puts "==============="
##                  #puts desc
##                end
##                 
##              elsif field.include? "Internal:"
##                myparent = results.parent.parent.parent
##                mytext = myparent.text
##                myinternal =  mytext.sub('Internal:','').split(/(Entered.*:)/)
##                myinternal.each do |internal|
##                  #puts "==============="
##                  #puts internal
##                end
##              end
##            end
          end
        end

      end     

    end

#    puts mail.methods
#    puts mail.subject
    
#    puts mail.text_part.body.to_s
#    puts mail.html_part.body.to_s

end
